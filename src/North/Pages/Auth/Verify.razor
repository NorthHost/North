@page "/verify/{Type}/{Id}"

@using North.Common
@using North.Data.Access
@using North.Data.Entities

@inject ILogger _logger
@inject ISnackbar _snackbar
@inject OurDbContext _context
@inject NavigationManager _navigationManager

<MudStack Row AlignItems="AlignItems.Center" id="verify_stack">
    @if (VerifyRunning)
    {
        <MudProgressCircular Color="Color.Info" Indeterminate StrokeWidth="4" id="verify_progress"/>
        <MudText id="verify_message">验证中，请稍后……</MudText>
    }
    else
    {
        <MudText id="verify_message">@($"系统将在{RemainTime}秒后跳转")</MudText>
    }
</MudStack>

<style>
    #verify_stack {
        width: fit-content;
        height: fit-content;
        left: 0;
        right: 0;
        top: 0;
        bottom: 180px;
        margin: auto;
        position:absolute;
    }

    #verify_progress {
        width: 22px;
        height: 22px;
    }

    #verify_message {
        font-size: 20px;
    }
</style>


@code{
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Type { get; set; } = string.Empty;

    public int RemainTime { get; set; } = 5;
    public bool VerifyRunning { get; set; } = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                switch (Type.ToLower())
                {
                    case "register": await VerifyRegister(); break;
                    default: break;
                }
            }
            catch(Exception e)
            {
                _logger.Error($"Verify {Type} error", e);
                _snackbar.Add("验证失败", Severity.Error);
            }
            finally
            {
                VerifyRunning = false;
                await InvokeAsync(() => StateHasChanged());

                while(RemainTime > 0)
                {
                    await Task.Delay(1000);
                    await InvokeAsync(() =>
                    {
                        RemainTime -= 1;
                        StateHasChanged();
                    });
                }
                _navigationManager.NavigateTo("/login", true);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    /// <summary>
    /// 用户注册验证
    /// </summary>
    /// <returns></returns>
    private async Task VerifyRegister()
    {
        var sqlUserData = new SqlUserData(_context);
        var sqlVerifyEmailData = new SqlVerifyEmailData(_context);

        var verifyEmail = sqlVerifyEmailData.Find(e => e.Id == Id);
        if((verifyEmail is null) || (TimeHelper.TimeStamp > verifyEmail.ExpireTime))
        {
            _snackbar.Add("链接不存在或已过期", Severity.Error);
        }
        else
        {
            var user = await sqlUserData.FindAsync(u => u.Email == verifyEmail.Email);
            if((user is not null) && (user.State is State.Checking))
            {
                user.State = State.Normal;
                await sqlUserData.UpdateAsync(user);

                _snackbar.Add("验证成功", Severity.Success);
            }
            else
            {
                _snackbar.Add("账户不存在或状态异常", Severity.Error);
            }
        }

        // 删除验证邮件
        if(verifyEmail is not null)
        {
            await sqlVerifyEmailData.RemoveAsync(verifyEmail);
        }
    }
}