@page "/Pics"

@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using ImageBed.Data.Access
@using ImageBed.Data.Entity
@using System.Net

@inject IJSRuntime JS
@inject MessageService _message
@inject NotificationService _notice
@inject NavigationManager NavigationManager

<Space>
    <SpaceItem>
        <Search Placeholder="Search what you want..." EnterButton="true" @bind-Value="searchText" Loading=@searchRunning OnSearch=@OnSearch/>
    </SpaceItem>
    @code{
        string? searchText;
        bool searchRunning = false;

        public void OnSearch()
        {
            searchRunning = true;

            imagesShow.Clear();
            foreach (var image in imagesAll.Where(image => (searchText == null) || (image.Name ?? "").Contains(searchText) || (image.Owner ?? "").Contains(searchText))) {
                imagesShow.Add(image);
            }

            searchRunning = false;
        }
    }
    <SpaceItem>
        <Upload Multiple
            @attributes=attrs
            FileList=fileList
            ShowUploadList=false
            OnChange="StartImport"
            OnCompleted="UploadFinished">
            <Button Type="@ButtonType.Primary" Ghost OnClick=@ImportImages>导  入</Button>
        </Upload>
        @code{
            Upload? upload;
            List<UploadFileItem> fileList = new List<UploadFileItem>();
            Dictionary<string, object> attrs = new Dictionary<string, object>
            {
                {"Action", "/api/image" },
                {"Name", "files" },
                {"Multiple", true }
            };


            async void StartImport(UploadInfo imageInfo)
            {
                await _notice.Open(new NotificationConfig()
                {
                    Message = "图片开始导入",
                    Description = "图片后台导入中，导入完成前请勿再次导入！"
                });
            }


            async void UploadFinished()
            {
                await _notice.Open(new NotificationConfig()
                {
                    Message = "图片导入完成",
                    Description = "图片已成功导入至服务器！"
                });
            }
        }
    </SpaceItem>
    @if ((imagesSelected != null ) && (imagesSelected.Any()))
    {
        <SpaceItem><Button Type="@ButtonType.Primary" Ghost OnClick=@ExportSelectedImages>导  出</Button></SpaceItem>
        <SpaceItem><Button Danger Ghost OnClick=@RemoveSelectedImages>删 除</Button></SpaceItem>
    }
</Space>
@code{
    async void RemoveSelectedImages()
    {
        using var context = new OurDbContext();
        using var sqlImageData = new SQLImageData(context);

        foreach(var image in imagesSelected)
        {
            await sqlImageData.Remove(image.Id);
            imagesAll.Remove(image);
        }
        _message.Success("图片已删除!");

        OnSearch();
    }


    async Task ExportSelectedImages()
    {
        // 加载配置文件
        List<string> imageFullpaths = new();

        // 构造源文件数组
        if(GlobalValues.appSetting != null)
        {
            foreach(var image in imagesSelected)
            {
                imageFullpaths.Add($"{GlobalValues.appSetting?.Data?.Resources?.Images?.Path}/{image.Name}");
            }
        }

        // 打包压缩文件
        if (File.Exists($"{GlobalValues.appSetting?.Data?.Resources?.Images?.Path}/Images.export"))
        {
            File.Delete($"{GlobalValues.appSetting?.Data?.Resources?.Images?.Path}/Images.export");
        }
        FileOperator.CompressMulti(imageFullpaths.ToArray(), $"{GlobalValues.appSetting?.Data?.Resources?.Images?.Path}/Images.export");

        await JS.InvokeVoidAsync("downloadFileFromStream", "Images.export", "api/image/Images.export");
        await _message.Success("导出成功!");
    }


    async Task ImportImages()
    {
        
    }
}
<br/>
<br/>
<Table @ref="table"
       TItem="ImageEntity"
       DataSource="@imagesShow"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="@imagesSelected"
>
        <Selection Key="@(context.Id?.ToString())" />
        <Column @bind-Field="@context.Name" Align="@ColumnAlign.Center" Sortable>
            <a href=@context.Url>@context.Name</a>
        </Column>
        <Column @bind-Field="@context.Dpi" Sortable Align="@ColumnAlign.Center"/>
        <Column @bind-Field="@context.Size" Sortable Align="@ColumnAlign.Center"/>
        <Column @bind-Field="@context.UploadTime" Sortable Align="@ColumnAlign.Center"/>
        <Column @bind-Field="@context.RequestNum" Sortable Align="@ColumnAlign.Center"/>
        <Column @bind-Field="@context.Owner" Sortable Align="@ColumnAlign.Center"/>
        <ActionColumn Align="@ColumnAlign.Center">
            <Space>
                <SpaceItem><Button Type="@ButtonType.Primary" Ghost OnClick="()=>{CopyUrlToClip(NavigationManager.BaseUri + context.Url);}">复 制</Button></SpaceItem>
                <SpaceItem><Button Type="@ButtonType.Primary" Ghost OnClick="()=>{DownloadFile(NavigationManager.BaseUri + context.Url, context.Name);}">下 载</Button></SpaceItem>
                <SpaceItem><Button Danger OnClick="()=>{RemoveImage(context.Id);}">删 除</Button></SpaceItem>
            </Space>
        </ActionColumn>
</Table>

@code {
    ITable table;
    int _pageSize = 8;

    List<ImageEntity> imagesShow = new();
    List<ImageEntity> imagesAll = new();
    IEnumerable<ImageEntity> imagesSelected;

    protected override async Task OnInitializedAsync()
    {
        using var context = new OurDbContext();
        using var sqlImageData = new SQLImageData(context);

        imagesAll = await sqlImageData.Get();

        OnSearch();
    }

    async void CopyUrlToClip(string? content)
    {
        if (!string.IsNullOrEmpty(content))
        {
            await JS.InvokeVoidAsync("CopyToClip", content);
            _message.Success("已拷贝链接到剪贴板！");
        }
        else
        {
            await _message.Error("拷贝链接失败！");
        }
    }


    async void DownloadFile(string url, string imagename)
    {
        await JS.InvokeVoidAsync("downloadFileFromStream", imagename, url);
    }


    async void RemoveImage(string? id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            using var context = new OurDbContext();
            using var sqlImageData = new SQLImageData(context);

            await sqlImageData.Remove(id);

            ImageEntity? image = imagesAll.FirstOrDefault(image => image.Id == id);
            if(image != null)
            {
                imagesAll.Remove(image);
                OnSearch();
            }

            _message.Success("图片已删除！");
        }
    }
}